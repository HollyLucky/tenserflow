import tensorflow as tf
# node1=tf.constant(3.0,dtype=tf.float32)
# node2=tf.constant(4.0)
# print(node1,node2)
# sess=tf.Session()
# print(sess.run([node1,node2]))
# node3=tf.add(node1,node2)
# print("node3:",node3)
# print("sess.run(node3)",sess.run(node3))
# a=tf.placeholder(tf.float32)
# b=tf.placeholder(tf.float32)
# adder_node=a+b
# print(sess.run(adder_node,{a:3,b:4}))
# print(sess.run(adder_node,{a:[1,2],b:[3,4]}))
# add_and_triple=adder_node*3
# print(sess.run(add_and_triple,{a:3,b:4}))
# W=tf.Variable([.3],dtype=tf.float32)
# b=tf.Variable([-.3],dtype=tf.float32)
# x=tf.placeholder(tf.float32)
# linear_model=W*x+b
# init=tf.global_variables_initializer()
# sess.run(init)
# W=tf.Variable([.3],dtype=tf.float32)
# b=tf.Variable([-.3],dtype=tf.float32)
# x=tf.placeholder(tf.float32)
# linear_model=W*x+b
# init=tf.global_variables_initializer()
# sess.run(init)
# print(sess.run(linear_model,{x:[1,2,3,4]}))
# y=tf.placeholder(tf.float32)
# sqared_deltas=tf.square(linear_model-y)
# loss=tf.reduce_sum(sqared_deltas)
# print(sess.run(loss,{x:[1,2,3,4],y:[0,-1,-2,-3]}))
# fixW=tf.assign(W,[-1.])
# fixb=tf.assign(b,[1.])
# sess.run([fixW,fixb])
# print(sess.run(loss,{x:[1,2,3,4],y:[0,-1,-2,-3]}))
# optimizer=tf.train.GradientDescentOptimizer(0.01)
# train=optimizer.minimize(loss)
# sess.run(init)
# for i in range(1000):
#     sess.run(train,{x:[1,2,3,4],y:[0,-1,-2,-3]})
# print(sess.run([W,b]))
# a=tf.constant([1.0,2.0],name="a")
# b=tf.constant([2.0,3.0],name="b")
# result=tf.add(a,b,name="add")
# print(result)
# a=tf.constant([1,2],name="a")
# b=tf.constant([2.0,3.0],name="b")
# result=tf.add(a,b,name="add")
# print(result)
# sess=tf.Session()
# a=tf.constant([1,2],name="a")
# b=tf.constant([3,4],name="b")
# result=tf.add(a,b,name="add")
# # print(sess.run(result))
# print(result.eval(session=sess))
# weights=tf.Variable(tf.random_normal([2,3],stddev=2))
# biases=tf.Variable(tf.zeros([3]))
# w2=tf.Variable(weights.initial_value())
# w3=tf.Variable(weights.initial_value()*2.0)
# w1=tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))
# w2=tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))
# x=tf.constant([[0.7,0.9]])
# a=tf.matmul(x,w1)
# y=tf.matmul(a,w2)
# sess=tf.Session()
# init_op=tf.global_variables_initializer()
# sess.run(init_op)
# print(sess.run(y))
# sess.close()
# w3=tf.Variable(tf.random_normal([2,3],stddev=1),name="w3")
# w4=tf.Variable(tf.random_normal([2,2],stddev=1),name="w4")
# tf.assign(w3,w4,validate_shape=False)
w1=tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))
w2=tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))
x=tf.placeholder(tf.float32,shape=[1,2],name="input")
a=tf.matmul(x,w1)
y=tf.matmul(a,w2)
sess=tf.Session()
init_op=tf.global_variables_initializer()
sess.run(init_op)
print(sess.run(y,feed_dict={x:[[0.7,0.9]]}))